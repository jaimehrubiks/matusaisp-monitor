<%
function bytesToMBs(bytes){
    return (bytes/1024/1024).toFixed(2)+' MBs'
}
%>

<div class="user">
  <h1>Panel de Usuario</h2>

  <div class="row">
  <div class="col-md-6">
    <h2>Estadísticas</h2>
    <h3>Datos de la empresa</h3>
          <form class="form-horizontal">

            <div class="form-group">
              <label class="col-sm-2 control-label">Name</label>
              <div class="col-sm-10">
                <p class="form-control-static"> <%= user.name %> </p>
              </div>
            </div>
            
            <div class="form-group">
              <label class="col-sm-2 control-label">Bytes</label>
              <div class="col-sm-10">
                <p class="form-control-static"> <%= bytesToMBs(data.user.bytes) + ' / ' + bytesToMBs(data.user.totalBytes) %> </p>
              </div>
            </div>
            
            <div class="form-group">
              <label class="col-sm-2 control-label">Tarificación</label>
              <div class="col-sm-10">
                <p class="form-control-static"> 
                <%= 
                    parseInt(data.user.bytes/10000) + ' PYG'
                     %> 
                </p>
              </div>
            </div>
            
            <div class="form-group">
              <label class="col-sm-2 control-label">%</label>
              <div class="col-sm-10">
                <p class="form-control-static"> <%= (data.user.bytes/data.user.totalBytes*100).toFixed(2) + ' %' %> </p>
              </div>
            </div>
            
            <div class="form-group">
              <label class="col-sm-2 control-label">Active</label>
              <div class="col-sm-10">
                <p class="form-control-static"> <%= data.user.active %> </p>
              </div>
            </div>
            
          </form>
    <h3>Lista de Sedes</h3>
      <table class="table table-striped table-hover ">
        <tr>
          <th>Nombre</th>
          <th>Address</th>
          <th>Int</th>
          <th>Bytes</th>
          <th>Consumo</th>
          <th>Active</th>
        </tr>
        <% for(var i=0; i < data.networks.length; i++) { %>
          <tr>
            <td><%= data.networks[i].name %></td>
            <td><%= data.networks[i].address %></td>
            <td><%= data.networks[i].int  %></td>
            <td><%= bytesToMBs(data.networks[i].bytes)  %></td>
            <td><%= parseInt(data.networks[i].bytes/10000) + ' PYG'  %></td>
            <td><%= data.networks[i].active %></td>
          </tr>
      <% } %>
      </table>
  </div>
  <div class="col-md-6">
    <h2>Resumen de uso de datos</h2>
    <h3>Por sedes</h3>
      <canvas id="resumenDatosSedes" width="400" height="400"></canvas>
  </div>
  </div>

</div>


<script>
  //Chart.defaults.global.defaultFontColor = '#FFFFFF';
  Chart.defaults.global.responsive = false;
  var data = <%- JSON.stringify(data) %>
  var colors = [ "#FF6384", "#4BC0C0", "#FFCE56", "#E7E9ED", "#36A2EB", "#38F209"]

  // Start
  //genUsersCircle();
  genNetworksCircle();

  // Generate
  function genUsersCircle(){
      var userscircledata = {
          datasets:[{
              data: data.users.map(function(user){ return parseInt(user.bytes/1024/1024) }),
              backgroundColor: colors,
              label: 'resumen datos usuario'
          }],
          labels: data.users.map(function(user){ return user.name })
      };

      var ctx = document.getElementById("resumenDatosUsuarios").getContext("2d");
      ctx.canvas.width = 400;
      ctx.canvas.height = 400;
      new Chart(ctx, {
          data: userscircledata,
          type: 'polarArea'//,
          //options: options
      });
  }
  function genNetworksCircle(){
      var networkscircledata = {
          datasets:[{
              data: data.networks.map(function(net){ return parseInt(net.bytes/1024/1024) }),
              backgroundColor: colors,
              label: 'resumen datos networks'
          }],
          labels: data.networks.map(function(net){ return net.name })
      };

      var ctx = document.getElementById("resumenDatosSedes").getContext("2d");
      ctx.canvas.width = 400;
      ctx.canvas.height = 400;
      new Chart(ctx, {
          data: networkscircledata,
          type: 'doughnut'//,
          //options: options
      });
  }

// // GET DATA
// $.get( "/data/allusers", function( response ) {
//   users = response;
//   var i;
//   for( i=0; i<users.length; i++){
//     data.allusers_data.push(users[i].bytes);
//     data.allusers_labels.push(users[i].name);
//   }
// });




</script>