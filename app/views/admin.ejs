<div class="admin">
  <h1>Web de administración</h2>

  <div class="row">
  <div class="col-md-6">
    <h2>Estadísticas</h2>
    <h3>Lista de Usuarios</h3>
      <table class="table table-striped table-hover ">
        <tr>
          <th>Nombre</th>
          <th>Bytes</th>
          <th>%</th>
          <th>Active</th>
        </tr>
        <% for(var i=0; i < data.users.length; i++) { %>
          <tr>
            <td><%= data.users[i].name %></td>
            <td><%= data.users[i].bytes + ' / ' + data.users[i].totalBytes  %></td>
            <td><%=  (data.users[i].bytes/data.users[i].totalBytes*100).toFixed(2) + ' %'  %></td>
            <td><%= data.users[i].active %></td>
          </tr>
      <% } %>
      </table>
    <h3>Lista de Sedes</h3>
      <table class="table table-striped table-hover ">
        <tr>
          <th>Nombre</th>
          <th>Address</th>
          <th>Int</th>
          <th>Bytes</th>
          <th>Active</th>
        </tr>
        <% for(var i=0; i < data.networks.length; i++) { %>
          <tr>
            <td><%= data.networks[i].name %></td>
            <td><%= data.networks[i].address %></td>
            <td><%= data.networks[i].int  %></td>
            <td><%= data.networks[i].bytes  %></td>
            <td><%= data.networks[i].active %></td>
          </tr>
      <% } %>
      </table>
    <h3>CPU Server ussage</h3>
    <canvas id="cpu" width="400" height="100"></canvas>

  </div>
  <div class="col-md-6">
    <h2>Resumen de uso de datos</h2>
    <h3>Por usuarios</h3>
      <canvas id="resumenDatosUsuarios" width="400" height="400"></canvas>
    <h3>Por sedes</h3>
      <canvas id="resumenDatosSedes" width="400" height="400"></canvas>
  </div>
  </div>

</div>


<script>
  //Chart.defaults.global.defaultFontColor = '#FFFFFF';
  Chart.defaults.global.responsive = false;
  var data = <%- JSON.stringify(data) %>
  var colors = [ "#FF6384", "#4BC0C0", "#FFCE56", "#E7E9ED", "#36A2EB", "#38F209"]
    var line1;
    var line2;
    var line3;

  // Start
  genUsersCircle();
  genNetworksCircle();
  cpuUssage();

  // Generate
  function genUsersCircle(){
      var userscircledata = {
          datasets:[{
              data: data.users.map(function(user){ return user.bytes }),
              backgroundColor: colors,
              label: 'resumen datos usuario'
          }],
          labels: data.users.map(function(user){ return user.name })
      };

      var ctx = document.getElementById("resumenDatosUsuarios").getContext("2d");
      ctx.canvas.width = 400;
      ctx.canvas.height = 400;
      new Chart(ctx, {
          data: userscircledata,
          type: 'polarArea'//,
          //options: options
      });
  }
  function genNetworksCircle(){
      var networkscircledata = {
          datasets:[{
              data: data.networks.map(function(net){ return net.bytes }),
              backgroundColor: colors,
              label: 'resumen datos networks'
          }],
          labels: data.networks.map(function(net){ return net.name })
      };

      var ctx = document.getElementById("resumenDatosSedes").getContext("2d");
      ctx.canvas.width = 400;
      ctx.canvas.height = 400;
      new Chart(ctx, {
          data: networkscircledata,
          type: 'doughnut'//,
          //options: options
      });
  }
  function cpuUssage(){
    var smoothie = new SmoothieChart({
      grid: { strokeStyle:'rgb(125, 0, 0)', 
              fillStyle:'rgb(60, 0, 0)',
              lineWidth: 1, 
              millisPerLine: 250, 
              verticalSections: 6 },
      //labels: { fillStyle:'rgb(60, 0, 0)' }
      labels: { fontSize:14 },
      maxValue:100,minValue:0
    });
    //smoothie.streamTo(document.getElementById("cpu"));

    // Data
    line1 = new TimeSeries();
    line2 = new TimeSeries();
    line3 = new TimeSeries();

    // Add a random value to each line every second
    // setInterval(function() {
    //   line1.append(new Date().getTime(), Math.random());
    //   //line2.append(new Date().getTime(), Math.random());
    // }, 1000);

    // Add to SmoothieChart
    smoothie.streamTo(document.getElementById("cpu"), 1000 /*delay*/); 
    smoothie.addTimeSeries(line1,
      { strokeStyle:'rgb(0, 255, 0)', fillStyle:'rgba(0, 255, 0, 0.4)', lineWidth:3 });
    smoothie.addTimeSeries(line2,
      { strokeStyle:'rgb(255, 0, 0)', fillStyle:'rgba(255, 0, 255, 0.3)', lineWidth:3 });
    smoothie.addTimeSeries(line3,
      { strokeStyle:'rgb(255, 0, 255)', lineWidth:3 });
  }

// // GET DATA
// $.get( "/data/allusers", function( response ) {
//   users = response;
//   var i;
//   for( i=0; i<users.length; i++){
//     data.allusers_data.push(users[i].bytes);
//     data.allusers_labels.push(users[i].name);
//   }
// });

var socket = io('http://127.0.0.1:3000');

  socket.on('cpu', function(msg){
    console.log(msg);
    line1.append(new Date().getTime(), msg.total.user)
    line2.append(new Date().getTime(), msg.total.sys)
    line3.append(new Date().getTime(), msg.total.idle)
//    $('#messages').append($('<li>').text(msg));
    //window.scrollTo(0, document.body.scrollHeight);
  });
  socket.on('connect', function() {
    //$('#messages').append('################## Connected ######################');
    console.log('ws connected')
  });



</script>